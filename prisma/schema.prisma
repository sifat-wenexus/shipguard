// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "./client"
  previewFeatures = ["postgresqlExtensions", "fullTextIndex", "fullTextSearch", "views", "metrics"]
}

datasource db {
  provider     = "postgresql"
  relationMode = "foreignKeys"
  url          = env("DATABASE_URL")
}

enum AppStatus {
  INSTALLED
  INITIALIZING
  UPDATING
  READY
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  PENDING
  PROCESSING
  DISABLED
  DELETING
}

enum InsurancePricingType {
  PERCENTAGE
  FIXED_PRICE
  FIXED_MULTIPLE
}

enum JobStatus {
  SCHEDULED
  CANCELLED
  FINISHED
  PENDING
  RUNNING
  FAILED
  PAUSED
}

enum JobExecutionStatus {
  SUCCEEDED
  CANCELLED
  RUNNING
  PAUSED
  FAILED
}

enum ElementPlacementPosition {
  INSIDE_BEGIN
  INSIDE_END
  REPLACE
  BEFORE
  AFTER
}

enum TextAlignment {
  CENTER
  RIGHT
  LEFT
}

enum ClaimStatus {
  REQUESTED
  INPROGRESS
  CANCEL
  APPROVE
  PARTIALLYAPPROVE
}

enum FullfillmentStatus {
  UNFULFILLED
  FULFILLED
  PARTIALLY_FULFILLED
}

enum ClaimIssue {
  DAMAGED
  STOLLEN
  LOST
}

enum ClaimRequested {
  RESHIP
  REFUND
}

enum EmailTemplateName {
  CLAIM_REQUEST_EMAIL_FOR_ADMIN
  CLAIM_REQUEST_EMAIL_FOR_CUSTOMER
  CLAIM_REFUND_EMAIL_FOR_CUSTOMER
  CLAIM_REORDER_EMAIL_FOR_CUSTOMER
  CLAIM_CANCEL_EMAIL_FOR_CUSTOMER
}

enum BulkOperationType {
  MUTATION
  QUERY
}

enum BulkOperationStatus {
  CANCELED
  CENCELING
  COMPLETED
  CREATED
  EXPIRED
  FAILED
  RUNNING
}

enum BulkOperationErrorCode {
  ACCESS_DENIED
  INTERNAL_SERVER_ERROR
  TIMEOUT
}

model Country {
  id   String @id
  name String

  Timezones Timezone[]
}

model Timezone {
  id        String @id
  countryId String
  gmtOffset String

  Country Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Stores  Store[]
}

view TimezoneSimplified {
  id        String @id
  gmtOffset String
  countries String
}

model Session {
  id      String  @id
  userId  BigInt?
  storeId String?

  shop        String
  state       String
  isOnline    Boolean   @default(false)
  scope       String?
  expires     DateTime? @db.Timestamptz()
  accessToken String
  sseToken    String?

  createdAt DateTime @default(now()) @db.Timestamptz()

  Store Store? @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([shop, userId])
}

model Store {
  id                String @id
  appInstallationId String

  domain                          String    @unique
  name                            String
  email                           String?
  description                     String?
  logo                            String?
  appStatus                       AppStatus @default(INSTALLED)
  timezoneId                      String
  currencyCode                    String
  moneyFormat                     String
  moneyInEmailsFormat             String
  moneyWithCurrencyFormat         String
  moneyWithCurrencyInEmailsFormat String
  lastMigrationId                 String?

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  File                        File[]
  Products                    Product[]
  Collections                 Collection[]
  Jobs                        Job[]
  Timezone                    Timezone                      @relation(fields: [timezoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ProductTags                 ProductTag[]
  ProductTypes                ProductType[]
  ProductVendors              ProductVendor[]
  Sessions                    Session[]
  PackageProtection           PackageProtection?
  PackageProtectionOrders     PackageProtectionOrder[]
  PackageProtectionClaimOrder PackageProtectionClaimOrder[]
  EmailTemplates              EmailTemplate[]
  GoogleAuthCredential        GoogleAuthCredential?
  SmtpSetting                 SmtpSetting?

  @@index([appInstallationId])
}

model Job {
  id      Int     @id @default(autoincrement())
  storeId String?

  status JobStatus
  name   String

  node        String
  scheduledAt DateTime? @db.Timestamptz()
  maxRetries  Int? // null means infinite
  tries       Int       @default(0)
  interval    Int? // in seconds
  payload     Json?

  executedAt DateTime? @db.Timestamptz()
  createdAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @db.Timestamptz()

  Store          Store?             @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Executions     JobExecution[]
  BulkOperations JobBulkOperation[]
  Dependencies   JobDependency[]    @relation("JobDependency")
  Dependents     JobDependency[]    @relation("DependsOn")

  @@index([status, storeId, name])
  @@index([executedAt], type: Brin)
}

model JobExecution {
  id    Int @id @default(autoincrement())
  jobId Int

  status      JobExecutionStatus
  currentStep String             @default("execute")
  prevStep    String?
  result      Json?
  progress    Int                @default(0)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  Job Job @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([jobId])
  @@index([status])
}

model JobDependency {
  jobId       Int
  dependsOnId Int

  Job       Job @relation("JobDependency", fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  DependsOn Job @relation("DependsOn", fields: [dependsOnId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([jobId, dependsOnId])
}

model File {
  id      String  @id @default(uuid())
  storeId String?

  size     Int
  mimeType String
  name     String?

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  Store Store? @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([storeId])
}

model Collection {
  id      String @id
  storeId String

  title         String
  featuredImage String?

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  Store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Products Product[]

  @@index([storeId])
}

model Product {
  id      String @id
  storeId String

  status ContentStatus @default(DRAFT)

  title         String
  vendor        String
  productType   String
  featuredImage String?
  handle        String
  tags          String[]

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  Store       Store            @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Variants    ProductVariant[]
  Collections Collection[]

  FixedPackageProtection      PackageProtection[] @relation("fixed")
  PercentagePackageProtection PackageProtection[] @relation("percentage")

  @@index([storeId])
}

view ProductTag {
  tag     String
  storeId String

  Store Store @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([storeId, tag])
}

view ProductType {
  productType String
  storeId     String

  Store Store @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([storeId, productType])
}

view ProductVendor {
  vendor  String
  storeId String

  Store Store @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([storeId, vendor])
}

model ProductVariant {
  id        String @id
  productId String

  sku                    String?
  title                  String
  featuredImage          String?
  price                  Decimal @db.Decimal(10, 2)
  compareAtPrice         Decimal @default(0) @db.Decimal(10, 2)
  inventoryQuantity      Int     @default(0)
  sellableOnlineQuantity Int     @default(0)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([productId])
}

model PackageProtection {
  storeId             String  @id
  fixedProductId      String?
  percentageProductId String?

  enabled                         Boolean                  @default(false)
  insurancePriceType              InsurancePricingType     @default(PERCENTAGE)
  price                           Float                    @default(0)
  percentage                      Float                    @default(0)
  defaultPercentage               Float                    @default(0)
  icon                            String                   @default("three")
  switchColor                     String                   @default("#000000")
  title                           String?
  enabledDescription              String?
  disabledDescription             String?
  policyUrl                       String?
  insuranceDisplayButton          Boolean                  @default(false)
  insuranceFulfillmentStatus      String?
  css                             String?
  defaultSetting                  Boolean                  @default(true)
  cssSelector                     String?
  position                        ElementPlacementPosition @default(BEFORE)
  showOnCartPage                  Boolean                  @default(true)
  showOnMiniCart                  Boolean                  @default(false)
  packageProtectionDefaultSetting Boolean                  @default(true)
  emailTemplateLogo               String?
  fixedMultiplePlan               Json?
  isSingle                        Boolean                  @default(true)

  // ExcludedVariants ExcludedPackageProtectionVariant[]
  excludedPackageProtectionProducts ExcludedPackageProtectionProduct[]

  FixedProduct      Product? @relation("fixed", fields: [fixedProductId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  PercentageProduct Product? @relation("percentage", fields: [percentageProductId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  Store Store @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ExcludedPackageProtectionProduct {
  id      String @id
  storeId String

  title          String?
  productId      String
  image          String
  productType    String?
  status         String?
  totalInventory Int
  totalVariants  Int
  vendor         String?

  excludedPackageProtectionVariants ExcludedPackageProtectionVariant[]

  PackageProtection PackageProtection @relation(fields: [storeId], references: [storeId], onDelete: Cascade, onUpdate: Cascade)
}

model ExcludedPackageProtectionVariant {
  id        String @id
  productId String

  availableForSale    Boolean?
  barcode             String?
  compareAtPrice      Float?
  displayName         String?
  image               String?
  inventoryManagement String?
  inventoryPolicy     String?
  inventoryQuantity   Int
  price               String
  selectedOptions     Json[]
  sku                 String?
  title               String?

  ExcludedPackageProtectionProduct ExcludedPackageProtectionProduct @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PackageProtectionOrder {
  id         Int     @id @default(autoincrement())
  orderId    String  @unique
  customerId String?
  storeId    String

  customerFirstName    String?
  customerLastName     String?
  customerEmail        String?
  protectionFee        Float              @default(0.00)
  orderAmount          Float              @default(0.00)
  hasClaimRequest      Boolean            @default(false)
  fulfillmentStatus    FullfillmentStatus @default(UNFULFILLED)
  claimStatus          ClaimStatus?
  orderName            String
  refundAmount         Float              @default(0.00)
  hasPackageProtection Boolean

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  claimDate DateTime @default(now()) @db.Timestamptz()

  Store                       Store                         @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PackageProtectionClaimOrder PackageProtectionClaimOrder[]
}

model PackageProtectionClaimOrder {
  id      Int    @id @default(autoincrement())
  orderId String
  storeId String

  issue                 ClaimIssue?
  requestedResulation   ClaimRequested?
  hasClaimRequest       Boolean         @default(false)
  claimStatus           ClaimStatus?
  comments              String?
  images                String?
  fulfillmentLineItemId String          @unique
  fulfillmentId         String
  claimStatusMessage    String?
  fulfillClaim          Boolean         @default(false)

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime? @updatedAt @db.Timestamptz()

  Store                  Store                  @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  packageProtectionOrder PackageProtectionOrder @relation(fields: [orderId], references: [orderId], onDelete: Cascade, onUpdate: Cascade)
}

model EmailTemplate {
  storeId String

  name    EmailTemplateName
  subject String
  body    String
  Store   Store             @relation(fields: [storeId], references: [id])

  @@id([storeId, name])
}

model GoogleAuthCredential {
  id String @id

  oauthState String
  payload    Json?
  email      String?

  createdAt DateTime @default(now()) @db.Timestamptz()

  Store Store @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SmtpSetting {
  id String @id

  provider   String // custom, google, etc.
  from       String?
  protocol   String?
  host       String?
  port       Int?
  tlsVersion String?
  timeout    Int     @default(10000)

  useProxy      Boolean @default(false)
  proxyHost     String?
  proxyPort     Int?
  proxyUsername String?
  proxyPassword String?

  username String?
  password String?

  createdAt DateTime @default(now()) @db.Timestamptz()

  Store Store @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model App {
  id Int @id @default(1)

  url String
}

model JobBulkOperation {
  id    String @id
  jobId Int

  createdAt DateTime @default(now()) @db.Timestamptz()

  Job Job? @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([jobId])
}
